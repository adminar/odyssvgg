services:
  odyssey_dev:
    container_name: odyssey_dev
    build:
      context: ..
      dockerfile: Dockerfile.dev
      args:
        - BUILD_DATE=${BUILD_DATE:-$(date +%Y%m%d_%H%M%S)}
    restart: unless-stopped
    privileged: true
    extra_hosts:
      - "odyssey.mysql:192.168.123.3"
      - "odyssey.redis:192.168.123.2"
    ports:
      - '8001:8001'  # 开发环境后端
      - '8080:80'    # 如果你需要前端调试，可以用 8080 映射到容器的 80
      - '8000:8000'  # 生产环境使用 8000 端口
    volumes:
      - ../:/app
      - ../log:/data/app/log
    networks:
      - odyssey
    depends_on:
      odyssey_mysql:
        condition: service_healthy
      odyssey_redis:
        condition: service_started
    environment:
      - GO_ENV=dev
    command: go run cmd/server/main.go

  odyssey:
    container_name: odyssey
    build:
      context: ..
      dockerfile: Dockerfile
      args:
        - BUILD_DATE=${BUILD_DATE:-$(date +%Y%m%d_%H%M%S)}
    restart: unless-stopped
    privileged: true
    extra_hosts:
      - "odyssey.mysql:192.168.123.3"
      - "odyssey.redis:192.168.123.2"
    ports:
      - '8000:8000'  # 生产环境后端
      - '80:80'      # 生产环境前端
    volumes:
      - ../log:/data/app/log
    networks:
      - odyssey
    depends_on:
      odyssey_mysql:
        condition: service_healthy
      odyssey_redis:
        condition: service_started
    environment:
      - GO_ENV=prod

  odyssey_mysql:
    container_name: odyssey_mysql
    image: mysql:8
    hostname: mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: 1234
    ports:
      - "3306:3306"
    volumes:
      - ../mysqldata:/var/lib/mysql/
      - ../init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - odyssey
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s


  odyssey_redis:
    container_name: odyssey_redis
    image: redis:latest
    hostname: redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - ../redisdata:/data
    command: ["redis-server", "--requirepass", "1234"]
    networks:
      - odyssey
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

networks:
  odyssey:
    name: odyssey
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.123.0/24